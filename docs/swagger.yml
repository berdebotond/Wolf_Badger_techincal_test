swagger: "2.0"
info:
  version: "1.0.0"
  title: GitHub OAuth Flask Application API
paths:
  /login:
    get:
      summary: Initiates the GitHub OAuth login process
      description: Initiates the GitHub account login process using Flask Dance.
      responses:
        "302":
          description: Redirects the user to the GitHub login page.
  /login/github/authorized:
    get:
      summary: Callback endpoint for GitHub OAuth authorization
      description: Retrieves the access token after the user is redirected back from GitHub.
      responses:
        "302":
          description: Redirects the user to the profile page.
  /profile:
    get:
      summary: Retrieves the user profile information
      description: Fetches the user's profile information from GitHub.
      responses:
        "200":
          description: JSON object containing the user's profile information.
        "401":
          description: Unauthorized - User not authenticated.
  /user:
    post:
      summary: Creates a new user
      description: Creates a new user if the user is authenticated.
      parameters:
        - name: user
          in: body
          description: JSON object representing the user details.
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        "201":
          description: The ID of the created user.
        "400":
          description: Bad Request - Invalid input data or missing required fields.
        "401":
          description: Unauthorized - User not authenticated.
  /user/{id}:
    get:
      summary: Retrieves a user by ID
      description: Retrieves a user by their ID.
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve.
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: JSON object containing the user details.
        "401":
          description: Unauthorized - User not authenticated.
        "404":
          description: Not Found - User with the given ID not found.
  /users:
    get:
      summary: Retrieves all users
      description: Retrieves a user by their ID.
      responses:
        "200":
          description: JSON object containing the user details.
        "401":
          description: Unauthorized - User not authenticated.

    put:
      summary: Updates a user by ID
      description: Updates a user by their ID.
      parameters:
        - name: id
          in: path
          description: ID of the user to update.
          required: true
          type: integer
          format: int64
        - name: user
          in: body
          description: JSON object representing the user details to be updated.
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        "200":
          description: JSON object containing the updated user details.
        "400":
          description: Bad Request - Invalid input data or missing required fields.
        "401":
          description: Unauthorized - User not authenticated.
        "404":
          description: Not Found - User with the given ID not found.
    delete:
      summary: Deletes a user by ID
      description: Deletes a user by their ID.
      parameters:
        - name: id
          in: path
          description: ID of the user to delete.
          required: true
          type: integer
          format: int64
      responses:
        "204":
          description: Empty response with a success status.
        "401":
          description: Unauthorized - User not authenticated.
        "404":
          description: Not Found - User with the given ID not found.
  /logs/error:
    get:
      summary: Retrieves error logs
      description: Retrieves error logs from the application.
      responses:
        "200":
          description: JSON array containing error log entries.
          schema:
            type: array
            items:
              $ref: "#/definitions/ErrorLog"
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      login:
        type: string
      name:
        type: string
      email:
        type: string
  UserInput:
    type: object
    properties:
      login:
        type: string
      name:
        type: string
      email:
        type: string
      location:
        type: string
  ErrorLog:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
      message:
        type: string
      level:
        type: string
