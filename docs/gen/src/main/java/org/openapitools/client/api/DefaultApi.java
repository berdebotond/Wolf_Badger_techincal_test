/*
 * GitHub OAuth Flask Application API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorLog;
import org.openapitools.client.model.UserInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for loginGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects the user to the GitHub login page. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = loginGetCall(_callback);
        return localVarCall;

    }

    /**
     * Initiates the GitHub OAuth login process
     * Initiates the GitHub account login process using Flask Dance.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects the user to the GitHub login page. </td><td>  -  </td></tr>
     </table>
     */
    public void loginGet() throws ApiException {
        loginGetWithHttpInfo();
    }

    /**
     * Initiates the GitHub OAuth login process
     * Initiates the GitHub account login process using Flask Dance.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects the user to the GitHub login page. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> loginGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = loginGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiates the GitHub OAuth login process (asynchronously)
     * Initiates the GitHub account login process using Flask Dance.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects the user to the GitHub login page. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginGithubAuthorizedGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects the user to the profile page. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginGithubAuthorizedGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/login/github/authorized";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginGithubAuthorizedGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = loginGithubAuthorizedGetCall(_callback);
        return localVarCall;

    }

    /**
     * Callback endpoint for GitHub OAuth authorization
     * Retrieves the access token after the user is redirected back from GitHub.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects the user to the profile page. </td><td>  -  </td></tr>
     </table>
     */
    public void loginGithubAuthorizedGet() throws ApiException {
        loginGithubAuthorizedGetWithHttpInfo();
    }

    /**
     * Callback endpoint for GitHub OAuth authorization
     * Retrieves the access token after the user is redirected back from GitHub.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects the user to the profile page. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> loginGithubAuthorizedGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = loginGithubAuthorizedGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Callback endpoint for GitHub OAuth authorization (asynchronously)
     * Retrieves the access token after the user is redirected back from GitHub.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Redirects the user to the profile page. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginGithubAuthorizedGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginGithubAuthorizedGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsErrorGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON array containing error log entries. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsErrorGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/error";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsErrorGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = logsErrorGetCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieves error logs
     * Retrieves error logs from the application.
     * @return List&lt;ErrorLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON array containing error log entries. </td><td>  -  </td></tr>
     </table>
     */
    public List<ErrorLog> logsErrorGet() throws ApiException {
        ApiResponse<List<ErrorLog>> localVarResp = logsErrorGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves error logs
     * Retrieves error logs from the application.
     * @return ApiResponse&lt;List&lt;ErrorLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON array containing error log entries. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ErrorLog>> logsErrorGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logsErrorGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ErrorLog>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves error logs (asynchronously)
     * Retrieves error logs from the application.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON array containing error log entries. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsErrorGetAsync(final ApiCallback<List<ErrorLog>> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsErrorGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ErrorLog>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profileGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the user&#39;s profile information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profileGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profileGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = profileGetCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieves the user profile information
     * Fetches the user&#39;s profile information from GitHub.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the user&#39;s profile information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public void profileGet() throws ApiException {
        profileGetWithHttpInfo();
    }

    /**
     * Retrieves the user profile information
     * Fetches the user&#39;s profile information from GitHub.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the user&#39;s profile information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> profileGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = profileGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieves the user profile information (asynchronously)
     * Fetches the user&#39;s profile information from GitHub.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the user&#39;s profile information. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profileGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = profileGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdDelete
     * @param id ID of the user to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response with a success status. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = userIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Deletes a user by ID
     * Deletes a user by their ID.
     * @param id ID of the user to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response with a success status. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public void userIdDelete(Long id) throws ApiException {
        userIdDeleteWithHttpInfo(id);
    }

    /**
     * Deletes a user by ID
     * Deletes a user by their ID.
     * @param id ID of the user to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response with a success status. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a user by ID (asynchronously)
     * Deletes a user by their ID.
     * @param id ID of the user to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty response with a success status. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdGet
     * @param id ID of the user to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the user details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = userIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a user by ID
     * Retrieves a user by their ID.
     * @param id ID of the user to retrieve. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the user details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public void userIdGet(Long id) throws ApiException {
        userIdGetWithHttpInfo(id);
    }

    /**
     * Retrieves a user by ID
     * Retrieves a user by their ID.
     * @param id ID of the user to retrieve. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the user details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userIdGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieves a user by ID (asynchronously)
     * Retrieves a user by their ID.
     * @param id ID of the user to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the user details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdGetAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userIdPut
     * @param id ID of the user to update. (required)
     * @param user JSON object representing the user details to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the updated user details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid input data or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdPutCall(Long id, UserInput user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/user/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userIdPutValidateBeforeCall(Long id, UserInput user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userIdPut(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = userIdPutCall(id, user, _callback);
        return localVarCall;

    }

    /**
     * Updates a user by ID
     * Updates a user by their ID.
     * @param id ID of the user to update. (required)
     * @param user JSON object representing the user details to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the updated user details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid input data or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public void userIdPut(Long id, UserInput user) throws ApiException {
        userIdPutWithHttpInfo(id, user);
    }

    /**
     * Updates a user by ID
     * Updates a user by their ID.
     * @param id ID of the user to update. (required)
     * @param user JSON object representing the user details to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the updated user details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid input data or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userIdPutWithHttpInfo(Long id, UserInput user) throws ApiException {
        okhttp3.Call localVarCall = userIdPutValidateBeforeCall(id, user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a user by ID (asynchronously)
     * Updates a user by their ID.
     * @param id ID of the user to update. (required)
     * @param user JSON object representing the user details to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JSON object containing the updated user details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid input data or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - User with the given ID not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userIdPutAsync(Long id, UserInput user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userIdPutValidateBeforeCall(id, user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPost
     * @param user JSON object representing the user details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created user. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid input data or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPostCall(UserInput user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPostValidateBeforeCall(UserInput user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userPost(Async)");
        }
        

        okhttp3.Call localVarCall = userPostCall(user, _callback);
        return localVarCall;

    }

    /**
     * Creates a new user
     * Creates a new user if the user is authenticated.
     * @param user JSON object representing the user details. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created user. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid input data or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public void userPost(UserInput user) throws ApiException {
        userPostWithHttpInfo(user);
    }

    /**
     * Creates a new user
     * Creates a new user if the user is authenticated.
     * @param user JSON object representing the user details. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created user. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid input data or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userPostWithHttpInfo(UserInput user) throws ApiException {
        okhttp3.Call localVarCall = userPostValidateBeforeCall(user, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new user (asynchronously)
     * Creates a new user if the user is authenticated.
     * @param user JSON object representing the user details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created user. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Invalid input data or missing required fields. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - User not authenticated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPostAsync(UserInput user, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPostValidateBeforeCall(user, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
